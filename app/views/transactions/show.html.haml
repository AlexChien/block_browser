%h1 Transaction

%table
  %tr
    %th Hash
    %td= hth(@transaction.transaction_hash)
  %tr
    %th Block
    %td= block_link @transaction.block
  - if Transaction.attribute_names.include?("transaction_size")
    %tr
      %th Size
      %td= @transaction.transaction_size
  %tr
    %th Inputs
    %td= @transaction.inputs.size
  %tr
    %th Outputs
    %td= @transaction.outputs.size
  %tr
    %th Output Value
    %td= @transaction.output_value

%h3 Inputs
%table
  %tr
    %th ID
    %th IDX
    %th Previous Output
    %th Value
    /%th Sequence
    %th Script


  - @transaction.inputs.sort_by(&:index_in_parent).each do |input|
    %tr
      %td= input.input_id
      %td= input.index_in_parent
      - prev_out = input.previous_output
      - if @transaction.coinbase
        %td generation
        %td 50
        %td= hth(input.script)
      - else
        %td
          = transaction_link(prev_out.transaction)
          = "/ #{input.previous_output_index}"
        %td= prev_out.value rescue "?"
        %td
          %pre{:style => "display:inline"}
            = Bitcoin::Script.new(input.script).to_string.split(" ").join("\n")
          = link_to "Run Script", script_path(input.id), :style => "display: inline"


%h3 Outputs
%table
  %tr
    %th ID
    %th IDX
    %th Next Input
    %th Value
    %th To Address
    %th Script
  - @transaction.outputs.sort_by(&:index_in_parent).each do |output|
    - script = Bitcoin::Script.new(output.script) rescue nil
    %tr
      %td= output.output_id
      %td= output.index_in_parent
      %td
        - if next_input = output.next_input
          - transaction_hash = hth(next_input.transaction.transaction_hash)
          = link_to(truncate(transaction_hash, 24, '...'), transaction_path(transaction_hash))
        - else
          unknown

      %td= output.value
      %td= script.get_pubkey_address rescue "?"
      %td
        %pre= script.to_string rescue "?"
