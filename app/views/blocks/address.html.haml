%table.details
  %tr
    %th Address
    %th= @address 
  %tr
    %th Hash160
    %th= @hash160
  %tr
    %th Transactions
    %td= @txouts.size
  %tr
    %th Total Volume
    %td= format_amount(@txouts.map(&:value).sum)
  %tr
    %th Current Balance
    %th= format_amount(STORE.get_balance(Bitcoin.hash160_from_address(@address)))

%h3 Transactions

%table.list
  %tr
    %th Tx
    %th Confirmed
    %th Address
    %th Type
    %th Value
    %th Total

  - total = 0
  - @txouts.each do |txout|
    %tr{:class => cycle('odd', 'even')}
      - tx = txout.get_tx
      %td= link_to(tx.hash, tx_path(tx.hash))
      %td
        - if block = tx.get_block
          = STORE.get_depth - block.depth
          (Block: #{link_to(block.depth, block_path(block.hash))})
        - else
          not yet
      - total += txout.value
      %td
        - txout.get_tx.in.each do |txin|
          - if txin.coinbase?
            generation
          - else
            - prev_out = txin.get_prev_out
            - if prev_out
              = link_to(prev_out.get_address, address_path(prev_out.get_address))
            - else
              unknown
            %br/
        %td.incoming= "->"
        %td.value= format_amount(txout.value)
        %td.value= format_amount(total)
    - if next_in = txout.get_next_in
      %tr
        - total -= txout.value
        - tx = next_in.get_tx
        %td= link_to(tx.hash, tx_path(tx.hash))
        %td
          - if block = tx.get_block
            = STORE.get_depth - block.depth
            (Block: #{link_to(block.depth, block_path(block.hash))})
          - else
            not yet
        %td
          - txout.get_next_in.get_tx.out.each do |txout|
            = link_to(txout.get_address, address_path(txout.get_address))
            %br/
        %td.outgoing= "<-"
        %td.value.outgoing= "- #{format_amount(txout.value)}"
        %td.value= format_amount(total)